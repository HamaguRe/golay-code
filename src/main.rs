// 拡張２元ゴレイ符号(Golay Code)を実装
// ゴレイ博士が考えたのはアルゴリズムそのものではなく，
// ハミング符号のアルゴリズムで効率的に符号化を行うための生成行列なのだろうか．
// 検査行列が分からん（組み合わせ考えるのが面倒）

// 生成行列
const G: [[u8; 24]; 12] = [
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1]
];


fn main() {
    let tx = [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1];
    println!("tx: {:?}", tx);
    let encoded = encode(tx);
    println!("encoded: {:?}", encoded);
}

// 生成行列を使って符号化
fn encode(a: [u8; 12]) -> [u8; 24] {
    let mut result = [0; 24];
    // aとGの内積
    for i in 0..24 {
        let mut tmp = a[0] * G[0][i];
        for j in 0..11 {
            tmp ^= a[j+1] * G[j+1][i];
        }
        result[i] = tmp;
    }
    result
}